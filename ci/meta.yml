meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.5
        params:
          TF_INPUT: false
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))

    terraform-bootstrap:
      task: terraform-bootstrap
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
        outputs:
          - name: terraform-config

    terraform-apply:
      task: terraform-apply
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
        run:
          path: sh
          dir: aws-analytical-dataset-generation
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_adg_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform init
              terraform workspace show
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: aws-analytical-dataset-generation
          - name: terraform-config
          - name: emr-launcher-release
          - name: emr-ami

    terraform-plan:
      task: terraform-plan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_plan: -lock-timeout=300s
        run:
          path: sh
          dir: aws-analytical-dataset-generation
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_adg_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              terraform init
              terraform workspace show
              terraform plan -detailed-exitcode
        inputs:
          - name: aws-analytical-dataset-generation
          - name: terraform-config
          - name: emr-launcher-release
          - name: emr-ami

    terraform-output-internal-compute:
      task: terraform-output-internal-compute
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-internal-compute/outputs.json
          dir: aws-internal-compute
        inputs:
          - name: aws-internal-compute
        outputs:
          - name: terraform-output-internal-compute
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"
#        AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
#        AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))

    terraform-output-ingest:
      task: terraform-output-ingest
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-ingest/outputs.json
          dir: aws-ingestion
        inputs:
          - name: aws-ingestion
        outputs:
          - name: terraform-output-ingest
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"

    terraform-output-management-infra:
      task: terraform-output-management-infra
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-management-infra/outputs.json
          dir: aws-management-infrastructure
        inputs:
          - name: aws-management-infrastructure
        outputs:
          - name: terraform-output-management-infra
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"

    synthetic-data-ingestion:
      task: synthetic-data-ingestion
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        run:
          dir: aws-dataworks-e2e-framework
          path: sh
          args:
            - -exc
            - |
              cd src/runners
              ./run-ci.sh "" "../../../terraform-output-ingest/outputs.json" "../../../terraform-output-internal-compute/outputs.json" "" "../../../terraform-output-management-infra/outputs.json"
        inputs:
          - name: aws-dataworks-e2e-framework
          - name: terraform-output-ingest
          - name: terraform-config
          - name: terraform-output-management-infra
          - name: terraform-output-internal-compute
      params:
        E2E_TEST_TIMEOUT: 2700
        E2E_FEATURE_TAG_FILTER: '@synthetic-data-ingestion'

    unit-tests:
      task: unit-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/python3-pyspark-pytest
        run:
          path: sh
          dir: aws-analytical-dataset-generation/steps
          args:
            - -exc
            - |
              pytest .
        inputs:
          - name: aws-analytical-dataset-generation
      input_mapping:
        aws-analytical-dataset-generation: aws-analytical-dataset-generation-pr

#    create-aws-profiles:
#      task: create-aws-profiles
#      config:
#        platform: linux
#        image_resource:
#          type: docker-image
#          source:
#            repository: ((dataworks.docker_awscli_repository))
#            tag: ((dataworks.docker_awscli_version))
#        outputs:
#          - name: .aws
#        params:
#          AWS_ROLE_ARN: arn:aws:iam::((dataworks.aws_management_acc)):role/ci
#          AWS_DEFAULT_REGION: ((dataworks.aws_region))
#          AWS_ACC:
#          AWS_ROLE: ci
#        run:
#          path: sh
#          args:
#            - -exc
#            - |
#              /assume-role
#              cat <<EOF> .aws/credentials
#              [default]
#              aws_access_key_id = $AWS_ACCESS_KEY_ID
#              aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
#              EOF
#              cat <<EOF> .aws/config
#              [default]
#              region = eu-west-2
#              [profile output]
#              role_arn = arn:aws:iam::$AWS_ACC:role/$AWS_ROLE
#              source_profile = default
#              region = eu-west-2
#              s3 =
#                max_concurrent_requests = 5
#                signature_version = s3v4
#                addressing_style = virtual
#              [profile input]
#              role_arn = arn:aws:iam::$SYNTHETIC_RAWDATA_AWS_ACC:role/$AWS_ROLE
#              source_profile = default
#              region = eu-west-2
#              s3 =
#                max_concurrent_requests = 5
#                signature_version = s3v4
#                addressing_style = virtual
#              EOF
