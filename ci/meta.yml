meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            tag: 0.0.5
        params:
          TF_INPUT: false
          AWS_REGION: ((dataworks.aws_region))
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_slack_webhook_url: ((dataworks.slack_webhook_url))

    terraform-bootstrap:
      task: terraform-bootstrap
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
        outputs:
          - name: terraform-config
    rotate-mysql-password:
      task: rotate-mysql-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          USERNAME: placeholder
          PARAM_NAME: placeholder
          PRIVILEGES: ""
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              jq -n --arg Username "$USERNAME" --arg Paramname "$PARAM_NAME" --arg Privileges "$PRIVILEGES" '{mysql_user_username: $Username, mysql_user_password_secret_name: $Paramname, privileges: $Privileges}' > manifest.json
              echo "Manifest is:"
              cat manifest.json
              aws lambda invoke --function-name manage-hive-metastore-mysql-users --invocation-type RequestResponse --payload file://manifest.json --cli-connect-timeout 600 --cli-read-timeout 600 output.json
              cat output.json | jq -eC "if .errorMessage? then error(.errorMessage) else true end"
    rotate-mysql-master-password:
      task: rotate-mysql-master-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              pip install boto3
              ./rotate_rds_master_user_password_update_secrets_manager.py hive-metastore metadata-store-hive
          dir: secrets-management
        inputs:
          - name: secrets-management
    rotate-adg-reader-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "adg-reader"
          PARAM_NAME: "metadata-store-adg-reader"
          PRIVILEGES: SELECT
    rotate-adg-writer-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "adg-writer"
          PARAM_NAME: "metadata-store-adg-writer"
          PRIVILEGES: ALL
    rotate-pdm-writer-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "pdm-writer"
          PARAM_NAME: "metadata-store-pdm-writer"
          PRIVILEGES: ALL
    rotate-analytical-env-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "analytical-env"
          PARAM_NAME: "metadata-store-analytical-env"
          PRIVILEGES: ALL
    rotate-bgdc-reader-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "bgdc-reader"
          PARAM_NAME: "metadata-store-bgdc-reader"
          PRIVILEGES: SELECT, CREATE
    rotate-kickstart-adg-writer-password:
      .: (( inject meta.plan.rotate-mysql-password ))
      config:
        params:
          USERNAME: "kickstart-adg-writer"
          PARAM_NAME: "metadata-store-kickstart-adg-writer"
          PRIVILEGES: ALL
    rotate-master-password:
      .: (( inject meta.plan.rotate-mysql-master-password ))
      config:
        params:
          USERNAME: "hive"
          PARAM_NAME: "metadata-store-hive"
    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          dir: aws-analytical-dataset-generation
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              export TF_VAR_manage_mysql_user_zip="{base_path = \"../manage-mysql-user-release\", version = \"$(cat ../manage-mysql-user-release/version)\"}"
              export TF_VAR_analytical_dataset_generation_exporter_jar="{base_path = \"../analytical-dataset-generation-exporter-release\", version = \"$(ls ../analytical-dataset-generation-exporter-release/*.jar | sed -e 's/^.*exporter-//' -e 's/.jar$//')\"}"
              terraform init
              terraform workspace show
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: aws-analytical-dataset-generation
          - name: terraform-config
          - name: emr-launcher-release
          - name: manage-mysql-user-release
          - name: analytical-dataset-generation-exporter-release
          - name: emr-ami

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          dir: aws-analytical-dataset-generation
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-ami/id)
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              export TF_VAR_manage_mysql_user_zip="{base_path = \"../manage-mysql-user-release\", version = \"$(cat ../manage-mysql-user-release/version)\"}"
              export TF_VAR_analytical_dataset_generation_exporter_jar="{base_path = \"../analytical-dataset-generation-exporter-release\", version = \"$(ls ../analytical-dataset-generation-exporter-release/*.jar | sed -e 's/^.*exporter-//' -e 's/.jar$//')\"}"
              terraform init
              terraform workspace show
              terraform plan -detailed-exitcode
        inputs:
          - name: aws-analytical-dataset-generation
          - name: terraform-config
          - name: emr-launcher-release
          - name: manage-mysql-user-release
          - name: analytical-dataset-generation-exporter-release
          - name: emr-ami

    terraform-output-internal-compute:
      task: terraform-output-internal-compute
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-internal-compute/outputs.json
          dir: aws-internal-compute
        inputs:
          - name: aws-internal-compute
        outputs:
          - name: terraform-output-internal-compute

    terraform-output-ingest:
      task: terraform-output-ingest
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-ingest/outputs.json
          dir: aws-ingestion
        inputs:
          - name: aws-ingestion
        outputs:
          - name: terraform-output-ingest

    terraform-output-adg:
      task: terraform-output-adg
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-adg/outputs.json
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
          - name: terraform-config
        outputs:
          - name: terraform-output-adg

    terraform-output-management-infra:
      task: terraform-output-management-infra
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-management-infra/outputs.json
          dir: aws-management-infrastructure
        inputs:
          - name: aws-management-infrastructure
        outputs:
          - name: terraform-output-management-infra

    synthetic-data-ingestion:
      task: synthetic-data-ingestion
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        run:
          dir: aws-dataworks-e2e-framework
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              cd src/runners
              ./run-ci.sh "" "../../../terraform-output-ingest/outputs.json" "../../../terraform-output-internal-compute/outputs.json" "" "../../../terraform-output-management-infra/outputs.json"
        inputs:
          - name: aws-dataworks-e2e-framework
          - name: terraform-output-ingest
          - name: terraform-config
          - name: terraform-output-management-infra
          - name: terraform-output-internal-compute
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          E2E_TEST_TIMEOUT: 2700
          E2E_FEATURE_TAG_FILTER: "@synthetic-data-ingestion"

    unit-tests:
      task: unit-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/python3-pyspark-pytest
            version: 0.0.17
        run:
          path: sh
          dir: aws-analytical-dataset-generation
          args:
            - -exc
            - |
              unset http_proxy
              unset https_proxy
              pytest -vs tests
        inputs:
          - name: aws-analytical-dataset-generation

    e2e-tests:
      task: e2e-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          NUMBER_OF_TOPICS_TO_USE: "3"
          E2E_TEST_TIMEOUT: 300
          E2E_FEATURE_TAG_FILTER: "@analytical-dataset-generation"
          ASSUME_DURATION: 3600
        run:
          path: sh
          dir: aws-dataworks-e2e-framework
          args:
            - -exc
            - |
              cd src/runners
              ./run-ci.sh \
              "../../../meta" \
              "../../../terraform-output-ingest/outputs.json" \
              "../../../terraform-output-internal-compute/outputs.json" \
              "" \
              "" \
              "../../../terraform-output-adg/outputs.json"
        inputs:
          - name: aws-dataworks-e2e-framework
          - name: aws-analytical-dataset-generation
          - name: meta
          - name: terraform-output-ingest
          - name: terraform-output-internal-compute
          - name: terraform-output-adg

    start-cluster:
      task: start-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              export topic_arn=arn:aws:sns:${AWS_DEFAULT_REGION}:${AWS_ACC}:uc_export_to_crown_completion_status_sns
              export message_json=$(cat <<EOF
              {
                "correlation_id": "$CORRELATION_ID",
                "s3_prefix": "$S3_PREFIX"
              }
              EOF
              )
              echo $message_json
              aws sns publish --topic-arn "$topic_arn" --message "$message_json"

    stop-cluster:
      task: stop-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              for CLUSTER_ID in $(aws emr list-clusters --active | jq -r '.Clusters[] | select(.Name | test("analytical-dataset-generator")) | .Id');
              do
                aws emr terminate-clusters --cluster-ids $CLUSTER_ID
              done
