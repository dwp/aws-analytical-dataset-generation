meta:
  plan:
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.5
            tag: 0.0.5
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
          dir: aws-analytical-dataset-generation
        inputs:
          - name: aws-analytical-dataset-generation
        outputs:
          - name: terraform-config
      params:
        AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
        AWS_REGION: eu-west-2
    terraform-apply:
      task: terraform-apply
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_VAR_slack_webhook_url: ((slack.webhook_url))
        run:
          path: sh
          dir: aws-analytical-dataset-generation
          args:
            - -exc
            - |
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              terraform init
              terraform workspace show
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
        inputs:
          - name: aws-analytical-dataset-generation
          - name: terraform-config
    terraform-plan:
      task: terraform-plan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((terraform.repository))
            version: ((terraform12.version))
            tag: ((terraform12.version))
        params:
          AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
          AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
          TF_INPUT: false
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_slack_webhook_url: ((slack.webhook_url))
        run:
          path: sh
          dir: aws-analytical-dataset-generation
          args:
            - -exc
            - |
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              terraform init
              terraform workspace show
              terraform plan -detailed-exitcode
        inputs:
          - name: aws-analytical-dataset-generation
          - name: terraform-config

    synthetic-data-ingestion:
      task: synthetic-data-ingestion
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-python-boto-behave.repository))
            version: ((docker-python-boto-behave.version))
            tag: ((docker-python-boto-behave.version))
        run:
          dir: aws-ingestion
          path: sh
          args:
            - -exc
            - |
              cd tests/bau/runners
              ./run-ci.sh "../../../../terraform-output-ingest/outputs.json"
        inputs:
          - name: aws-ingestion
      tear-down:
        task: tear-down
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: ((docker-awscli.repository))
              version: ((docker-awscli.version))
              tag: ((docker-awscli.version))
          params:
            AWS_ACCESS_KEY_ID: ((ci.aws_access_key_id))
            AWS_SECRET_ACCESS_KEY: ((ci.aws_secret_access_key))
            AWS_REGION: eu-west-2
          run:
            path: sh
            args:
              - -exc
              - |
                pipeline_name=`cat "meta/build_pipeline_name"`
                job_name=`cat "meta/build_job_name"`
                build_number=`cat "meta/build_name"`
                cat <<EOF> key.json
                {
                  "JobId": {
                    "S": "${pipeline_name}_${job_name}_${build_number}"
                  }
                }
                EOF
                aws dynamodb delete-item --table-name StubUcfsJobStatus --key file://key.json
          inputs:
            - name: aws-ingestion
